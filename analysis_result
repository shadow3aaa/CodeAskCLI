{
  "globalAnalysis": {
    "results": {
      "cli_analysis": {
        "globalAnalysisName": "CLI Analysis",
        "singlePagePrompt": "你是一个专业的代码分析助手，当用户提供代码文件时，请分析此代码文件在项目中的角色。假定用户对代码不熟悉，并希望快速了解项目的目的和实现方式。请按照以下结构化框架进行分析：\n1. 功能概述：用简明语言（100字以内）总结代码核心功能，描述代码实现目标、应用场景及主要模块，强调关键功能和用途。\n2. 列出该文件依赖的其他文件或模块。\n3. 代码结构分析：分析代码中关键函数、类和方法，简要说明它们的功能和作用；基于代码内容和结构，选择合适的 Mermaid 图表（流程图、时序图、类图或状态图）展示执行流程或模块关系，确保图表符合 Mermaid 语法。\n  \n",
        "summaryPrompt": "基于各文件分析，生成项目结构分析报告：\n\n1. **项目架构概览**\n   - 描述项目的主要模块和组件。\n   - 提供项目的目录结构树形图。\n   - 说明项目采用的架构设计模式（如MVC、MVVM等）。\n   - 使用Mermaid图表展示项目的分层关系。\n\n2. **模块依赖分析**\n   - 使用Mermaid图表展示模块间的依赖关系。\n   - 简述每个关键模块的职责。\n\n请确保分析清晰易懂，并使用Mermaid图表来可视化项目结构和依赖关系。\n",
        "summary": "### CodeAskCLI 项目结构分析报告\n\n#### 一、项目架构概览\n\n##### 1. 主要模块和组件\n| 模块分类       | 包含组件                          | 核心职责                                                                 |\n|----------------|-----------------------------------|--------------------------------------------------------------------------|\n| **入口层**     | main.py                          | CLI启动入口，参数解析与任务调度                                          |\n| **CLI控制层**  | cli.py                           | 参数解析、配置加载、AI客户端初始化、分析任务编排                          |\n| **核心逻辑层** | analyzer.py                      | 代码分析主逻辑（增量分析、多线程处理、报告生成）                          |\n| **服务层**     | api.py                           | 多AI服务适配（OpenAI/Anthropic/Azure/Gemini）                            |\n| **配置层**     | config.py                        | 配置文件管理（自动发现、多格式解析、优先级处理）                          |\n| **工具层**     | file_utils.py<br>templates.py    | 文件操作/哈希计算<br>提示词模板管理                                       |\n| **界面层**     | tui.py                           | 终端可视化界面（进度条、状态反馈、动画效果）                              |\n\n##### 2. 目录结构树形图\nbash\n.\n├── main.py                      # 命令行入口\n└── codeaskcli/                  # 核心包\n    ├── __init__.py              # 包元数据\n    ├── cli.py                   # 命令行控制\n    ├── analyzer.py              # 分析引擎\n    ├── api.py                   # AI服务适配\n    ├── config.py                # 配置管理\n    ├── file_utils.py            # 文件工具\n    ├── templates.py             # 模板管理\n    ├── tui.py                   # 终端界面\n    └── data/                    # 示例数据（假设存在）\n        └── default_templates.md\n\n\n##### 3. 架构设计模式\n**分层架构 + 工厂模式**\n- **分层架构**：\n  - **表示层**：cli.py + tui.py（用户交互）\n  - **业务层**：analyzer.py（核心分析逻辑）\n  - **服务层**：api.py（AI服务抽象）\n  - **基础设施层**：file_utils.py + config.py（工具支持）\n- **工厂模式**：\n  - `AIClientFactory` 动态创建不同AI服务客户端\n- **策略模式**：\n  - 多模板加载策略（默认/文件/配置）\n\n##### 4. 分层关系图（Mermaid）\nmermaid\nflowchart TD\n    subgraph 表示层\n        CLI[cli.py] --> TUI[tui.py]\n    end\n    \n    subgraph 业务层\n        CLI --> Analyzer[analyzer.py]\n        Analyzer -->|调用| API[api.py]\n    end\n    \n    subgraph 服务层\n        API --> Factory[AIClientFactory]\n    end\n    \n    subgraph 基础设施层\n        Analyzer --> FileUtils[file_utils.py]\n        CLI --> Config[config.py]\n        CLI --> Templates[templates.py]\n    end\n    \n    用户 --> CLI\n    FileUtils --> 文件系统\n    Config --> 配置文件\n\n\n#### 二、模块依赖分析\n\n##### 1. 模块依赖关系图（Mermaid）\nmermaid\ngraph TD\n    main.py --> codeaskcli.cli\n    codeaskcli.cli --> analyzer\n    codeaskcli.cli --> api\n    codeaskcli.cli --> config\n    codeaskcli.cli --> templates\n    codeaskcli.cli --> tui\n    \n    analyzer --> api\n    analyzer --> file_utils\n    analyzer --> tui\n    \n    api -->|工厂模式| AIClientFactory\n    \n    config --> file_utils\n    tui --> rich库\n    \n    style main.py fill:#f9f,stroke:#333\n    style codeaskcli.cli fill:#f96,stroke:#333\n\n\n##### 2. 关键模块职责说明\n\n| 模块               | 核心职责                                                                 | 关键依赖                  |\n|--------------------|--------------------------------------------------------------------------|---------------------------|\n| **cli.py**         | 命令行参数解析、配置加载、分析任务编排                                   | analyzer, api, config     |\n| **analyzer.py**    | 执行多线程代码分析、生成结构化报告、增量分析优化                         | api, file_utils, tui      |\n| **api.py**         | 统一多AI服务接口、处理协议差异、实现重试机制                             | requests, 配置管理        |\n| **config.py**      | 自动发现配置文件、支持多格式解析（YAML/TOML/JSON）、配置优先级管理       | os, yaml, tomli           |\n| **file_utils.py**  | 文件哈希计算、通配符匹配、分析结果持久化（JSON/Markdown）                | os, glob, hashlib         |\n| **templates.py**   | 管理AI提示模板（默认模板+自定义模板）                                    | 无                        |\n| **tui.py**         | 实时显示分析进度、错误状态可视化、总结生成动画                           | rich库                    |\n\n#### 三、关键架构特性总结\n\n1. **可扩展的AI服务支持**\n   - 通过工厂模式轻松接入新AI服务\n   - 统一接口规范（`BaseAIClient`）\n\n2. **高效分析机制**\n   - 增量分析避免重复处理\n   - 多线程加速文件处理\n   - 智能重试策略（指数退避）\n\n3. **灵活的配置系统**\n   - 多格式配置文件支持\n   - 环境变量覆盖机制\n   - 自动发现配置文件\n\n4. **用户体验优化**\n   - 交互式终端界面\n   - 彩色状态反馈\n   - 多级进度显示\n\n该架构通过清晰的分层设计和模块化组件，实现了高内聚低耦合的目标，同时保持了良好的可扩展性和可维护性。",
        "timestamp": 1745318591,
        "configHash": "9b74b6d580bca8cbeb51660fe27946d0",
        "configFile": "C:\\Users\\13940\\CodeAskCLI\\codeask.yaml"
      }
    }
  },
  "singleFileResults": [
    {
      "filename": "main.py",
      "content": "### 1. 功能概述  \n该代码是 **CodeAskCLI 的入口脚本**，提供命令行界面（CLI）的启动功能。通过解析用户输入参数（如代码路径、分析类型），调用 AI 模型分析代码库并生成报告。核心模块包括参数解析和任务执行，适用于开发者快速分析项目代码结构或生成文档。\n\n---\n\n### 2. 依赖项  \n- **`sys`**：Python 内置模块，处理系统相关操作（如脚本退出）。  \n- **`codeaskcli.cli`** 模块中的 `parse_arguments` 和 `run_analysis`：  \n  - `parse_arguments`：解析命令行参数（如输入路径、输出格式）。  \n  - `run_analysis`：执行核心分析逻辑（可能依赖其他未展示的内部模块或 AI 服务）。\n\n---\n\n### 3. 代码结构分析  \n#### 关键代码组成  \n1. **`main()` 函数**：  \n   - 调用 `parse_arguments` 获取用户输入参数。  \n   - 将参数传递给 `run_analysis` 启动分析流程，最终返回执行状态码。  \n\n#### 执行流程图（Mermaid）  \nmermaid\ngraph TD\n    A[命令行启动脚本] --> B[调用 main()]\n    B --> C[parse_arguments 解析参数]\n    C --> D[run_analysis 执行分析]\n    D --> E[返回状态码]\n    E --> F[脚本退出]\n  \n**说明**：流程图描述了从用户输入命令到程序退出的完整流程，核心逻辑由 `run_analysis` 实现（细节隐藏在未提供的模块中）。",
      "fileHash": "f74de2a73558d730d4bb3292fa5e913a",
      "status": "success"
    },
    {
      "filename": "codeaskcli\\__init__.py",
      "content": "### 1. 功能概述  \n该代码文件是 **CodeAskCLI 工具的核心包初始化模块**，定义了命令行工具的版本和基础描述。其目标是为用户提供一个基于 AI 的代码分析工具，通过命令行调用分析代码并生成报告。主要场景是开发者快速理解代码库结构和逻辑。当前文件未包含具体功能实现，但作为入口声明了工具的核心元数据，实际功能需依赖项目其他模块（如参数解析、AI 交互、报告生成等）。\n\n---\n\n### 2. 依赖项  \n- **无显式依赖**：当前文件未导入任何外部模块或文件，但根据功能描述推测，项目可能依赖以下模块（未在代码中直接体现）：  \n  - `argparse`：用于解析命令行参数。  \n  - `requests` 或 `openai`：用于调用 AI 模型接口。  \n  - 其他项目自定义模块（如报告生成器、代码解析逻辑等）。\n\n---\n\n### 3. 代码结构分析  \n#### 关键代码元素  \n- **`__version__` 变量**：定义工具版本号（`0.1.0`），供外部模块引用。  \n- **模块文档字符串**：描述工具用途，说明其核心功能是“基于命令行的代码分析工具，使用 AI 模型生成报告”。\n\n#### Mermaid 图表  \n由于当前文件未包含具体函数或类，以下为推测的 **CodeAskCLI 工具简化执行流程图**（基于功能描述）：  \n\nmermaid\nflowchart TD\n    A[用户启动命令行工具] --> B[解析输入参数]\n    B --> C[读取目标代码文件]\n    C --> D[调用 AI 模型分析代码]\n    D --> E[生成分析报告]\n    E --> F[输出报告到终端/文件]\n\n\n#### 说明  \n- 当前文件（`__init__.py`）在项目中承担 **包初始化** 角色，声明版本和工具元数据。  \n- 实际功能需通过其他模块实现（如 `main.py` 或 `cli.py`），包含参数解析、AI 交互等逻辑。  \n- 上述流程图展示了工具预期的工作流程，需结合其他模块代码完整实现。",
      "fileHash": "f8e89c45a636f4240a81008dcf281626",
      "status": "success"
    },
    {
      "filename": "codeaskcli\\file_utils.py",
      "content": "### 代码分析报告\n\n#### 1. 功能概述\n该文件是代码分析 CLI 工具的文件处理模块，提供核心文件操作功能，包括：计算文件哈希（校验文件唯一性）、读取文件内容、按模式匹配项目文件、保存分析结果到 JSON 和 Markdown 文件。主要应用于代码分析场景，支持自动化扫描项目文件并生成结构化分析报告。\n\n#### 2. 依赖项\n- **标准库模块**  \n  `os` (路径处理) | `glob` (文件匹配) | `hashlib` (哈希计算) | `json` (数据序列化)  \n- **类型标注**  \n  `typing.List`, `typing.Optional`\n\n#### 3. 代码结构分析\n**关键函数说明**  \n- `get_file_hash()`  \n  用 MD5 算法计算文件哈希值，用于检测文件变更  \n- `read_file()`  \n  安全读取文件内容，自动处理编码错误  \n- `find_matching_files()`  \n  按通配符模式递归搜索文件（支持 `*.py` 等格式）  \n- `save_analysis_results()`  \n  核心输出功能：  \n  1. 将分析数据保存为 `.codeaskdata` JSON 文件  \n  2. 生成 `SUMMARY.md` 总结文档  \n  3. 为每个被分析文件创建同名 `.md` 分析报告  \n\n**执行流程图**  \nmermaid\nflowchart TD\n    A[开始保存分析结果] --> B{输出路径是目录?}\n    B -->|是| C[指定.codeaskdata为文件名]\n    B -->|否| D[直接使用原路径]\n    C --> E[写入JSON分析数据]\n    D --> E\n    E --> F[生成SUMMARY.md总结]\n    F --> G{存在单页分析结果?}\n    G -->|是| H[为每个文件创建.md报告]\n    G -->|否| I[结束流程]\n    H --> I\n",
      "fileHash": "5a41d7ce2aaad1603f3497ad3c99d4c3",
      "status": "success"
    },
    {
      "filename": "codeaskcli\\templates.py",
      "content": "### 1. 功能概述  \n该代码文件是 **提示词模板管理器**，用于生成 AI 分析代码的指令模板。其核心功能包括：  \n- 提供默认的代码分析模板（单文件分析、项目总结报告），指导 AI 按结构化框架生成分析结果。  \n- 支持从外部文件加载自定义模板，扩展灵活性。  \n主要应用于代码分析 CLI 工具中，通过模板控制 AI 输出格式和内容逻辑，确保结果一致性。\n\n---\n\n### 2. 依赖项  \n- **内部依赖**：无  \n- **外部依赖**：仅 Python 标准库 `typing.Tuple`。\n\n---\n\n### 3. 代码结构分析  \n#### 关键函数说明  \n| 函数/方法                 | 功能说明                                                                 |\n|---------------------------|--------------------------------------------------------------------------|\n| `load_templates()`         | 返回硬编码的默认模板元组，包含单文件分析和项目总结的 Markdown 指令模板。 |\n| `load_template_from_file()`| 从用户指定文件路径读取自定义模板，处理文件读取异常并返回空字符串备用。    |\n\n#### 执行流程（Mermaid 流程图）  \nmermaid\nflowchart TD\n    A[用户请求模板] --> B{模板来源}\n    B -->|默认模板| C[调用 load_templates]\n    B -->|自定义文件| D[调用 load_template_from_file]\n    C --> E[返回单文件模板和总结模板]\n    D --> F{文件存在?}\n    F -->|是| G[读取内容并返回]\n    F -->|否| H[打印错误并返回空]\n",
      "fileHash": "c0ee2bf43c1f58ac20dfac0e83db314f",
      "status": "success"
    },
    {
      "filename": "codeaskcli\\config.py",
      "content": "### 1. 功能概述  \n该文件是配置文件管理模块，用于查找、加载和管理多种格式（YAML/TOML/JSON）的配置文件。其核心功能包括自动检测配置文件、解析配置内容，并提供统一接口获取API配置、分析器参数、文件过滤规则及提示词模板。主要服务于CLI工具，允许用户通过配置文件自定义工具行为。\n\n---\n\n### 2. 依赖项  \n- **Python标准库**：`os`, `json`, `pathlib`  \n- **第三方库**：`yaml`（处理YAML文件）、`tomli`（处理TOML文件）  \n- **项目内部依赖**：无显式依赖，但可能被其他模块调用以获取配置信息（如API密钥、模板路径等）。\n\n---\n\n### 3. 代码结构分析  \n\n#### 关键类与方法  \n- **`ConfigManager`类**：  \n  - **`find_config_file`**：遍历预定义文件名列表，查找项目目录下的配置文件。  \n  - **`load_config`**：根据文件扩展名选择解析器（YAML/TOML/JSON），加载配置到字典。  \n  - **`get_templates`**：从配置中提取单页/总结分析的提示词模板，支持从文件或直接配置读取。  \n  - **`get_api_config`**、**`get_analyzer_config`**：分别返回API和分析器的子配置。  \n  - **`get_filters`**：获取文件过滤规则，兼容旧版`extensions`字段并生成通配符模式。  \n\n#### Mermaid 流程图  \nmermaid\ngraph TD\n    A[用户初始化ConfigManager] --> B[调用load_config]\n    B --> C{是否指定config_path?}\n    C -- 否 --> D[调用find_config_file遍历CONFIG_FILENAMES]\n    C -- 是 --> E[直接使用指定路径]\n    D --> F{找到文件?}\n    F -- 是 --> G[按扩展名选择解析器]\n    F -- 否 --> H[返回空配置]\n    G --> I[加载配置到self.config]\n    I --> J[返回配置字典]\n    J --> K[用户调用get_*方法获取具体配置]\n  \n**说明**：流程图展示了从初始化到获取配置的完整流程，涵盖自动查找文件、格式解析及配置读取步骤。",
      "fileHash": "8520bdeb674c231ceed3df0de4279b65",
      "status": "success"
    },
    {
      "filename": "codeaskcli\\api.py",
      "content": "### 代码文件分析：`codeaskcli/api.py`\n\n#### 1. 功能概述  \n该文件是**多AI服务提供商的统一API调用框架**，目标是简化不同AI服务（OpenAI、Anthropic、Azure、Gemini）的接口调用。通过抽象基类定义统一接口，具体实现类处理不同API的协议差异，工厂模式动态创建客户端。核心功能包括：  \n- 标准化消息处理与响应清理  \n- 支持可扩展的AI服务接入  \n- 调试模式下的详细日志输出  \n- 向后兼容的旧版接口封装  \n\n---\n\n#### 2. 依赖项清单  \n**外部依赖**：  \npython\nimport requests  # 用于发送HTTP请求\nimport json      # 响应数据解析\n\n\n**内部依赖**：  \npython\n# 无显式项目内模块依赖，但以下模块可能调用本文件：\n# - 配置模块（读取API密钥/模型参数）\n# - 业务逻辑模块（通过AIClientFactory获取客户端实例）\n\n\n---\n\n#### 3. 代码结构与流程  \n\n**关键组件说明**：  \n| 类/方法                     | 功能说明                                                                 |\n|----------------------------|-------------------------------------------------------------------------|\n| `BaseAIClient`             | 抽象基类，定义`chat_completion`接口，提供响应清理和调试打印等通用功能         |\n| `OpenAIClient`             | OpenAI实现：构建符合OpenAI API规范的请求数据                              |\n| `AnthropicClient`          | Anthropic实现：转换消息格式（处理系统消息差异）                            |\n| `AzureOpenAIClient`        | Azure适配：处理部署名称和API版本等Azure特有参数                           |\n| `GeminiClient`             | Gemini适配：转换消息格式并处理系统消息嵌入                                |\n| `AIClientFactory`          | 工厂类：根据提供商名称动态创建对应客户端实例，支持扩展新提供商              |\n| `AIApiClient`（兼容层）     | 旧版接口包装，保持向后兼容性                                               |\n\n**执行流程图**（Mermaid类图）：  \nmermaid\nclassDiagram\n    class BaseAIClient {\n        <<Abstract>>\n        +chat_completion()\n        #_print_verbose()\n        +clean_response()\n    }\n    \n    BaseAIClient <|-- OpenAIClient\n    BaseAIClient <|-- AnthropicClient\n    BaseAIClient <|-- AzureOpenAIClient\n    BaseAIClient <|-- GeminiClient\n    \n    class AIClientFactory {\n        +get_client()\n        +register_client()\n        +list_supported_providers()\n    }\n    \n    class AIApiClient {\n        +chat_completion()\n        +clean_response()\n    }\n    \n    OpenAIClient ..> AIApiClient : 被包装\n    AIClientFactory --> OpenAIClient : 创建实例\n    AIClientFactory --> AnthropicClient : 创建实例\n    AIClientFactory --> AzureOpenAIClient : 创建实例\n    AIClientFactory --> GeminiClient : 创建实例\n\n\n**典型调用流程**：  \n1. 通过`AIClientFactory.get_client(\"openai\", api_key=...)`获取客户端实例  \n2. 调用`client.chat_completion(messages)`发送请求  \n3. 内部流程：  \n   - 转换消息格式（如需要）  \n   - 添加提供商特定参数（如Azure的API版本）  \n   - 发送HTTP请求并处理响应  \n   - 清理响应文本（移除Markdown标记等）  \n   - 调试模式下打印详细日志",
      "fileHash": "363b67742149c39f80bc59ae076e82e3",
      "status": "success"
    },
    {
      "filename": "codeaskcli\\cli.py",
      "content": "### 代码分析报告：codeaskcli\\cli.py\n\n#### 1. 功能概述\n该文件是CodeAsk CLI工具的命令行入口，主要功能是：  \n**通过命令行参数配置代码分析任务，整合AI服务（OpenAI/Azure等），分析指定代码库并生成结构化报告**。核心模块包括参数解析器、配置加载器、AI客户端工厂、提示词模板系统。关键功能包括增量分析、多AI供应商支持、并发处理、终端用户界面（TUI）控制等。\n\n#### 2. 依赖关系\npython\n# 主要依赖模块\nargparse            # 命令行参数解析\nos                  # 文件系统操作\ncodeaskcli.api      # AI服务客户端工厂\ncodeaskcli.analyzer # 核心分析逻辑\ncodeaskcli.templates# 提示词模板管理\ncodeaskcli.config   # 配置文件管理\n\n\n#### 3. 代码结构分析\n\n**关键函数说明**：\n| 函数/类             | 功能描述                                                                 |\n|---------------------|------------------------------------------------------------------------|\n| `parse_arguments()` | 定义23个命令行参数，处理路径/过滤器/AI参数/分析模式等配置               |\n| `prepare_prompts()` | 三层级提示词加载（默认模板→配置文件→命令行指定文件）                    |\n| `create_api_client()` | 动态创建AI客户端，支持OpenAI/Anthropic/Azure/Gemini的差异化配置逻辑 |\n| `run_analysis()`    | 主执行流：验证配置→加载模板→初始化分析器→启动并发分析→输出结果          |\n\n**执行流程图** (Mermaid):\nmermaid\ngraph TD\n    A[用户执行命令] --> B[parse_arguments解析参数]\n    B --> C{配置文件存在?}\n    C -->|是| D[加载配置]\n    C -->|否| E[使用默认配置]\n    D & E --> F[prepare_prompts准备提示词]\n    B --> G[prepare_file_patterns生成文件过滤器]\n    F & G --> H[create_api_client创建AI客户端]\n    H --> I[初始化CodeAnalyzer]\n    I --> J[analyze_project执行分析]\n    J --> K{启用TUI?}\n    K -->|是| L[显示交互式界面]\n    K -->|否| M[生成文本报告]\n\n\n**关键设计特点**：\n1. **配置优先级链**：环境变量 > 命令行参数 > 配置文件 > 默认值\n2. **多AI供应商适配**：通过工厂模式支持不同API的参数结构\n3. **增量分析优化**：通过配置文件哈希值跟踪变更，避免重复分析\n4. **并发控制**：可调节的线程数应对大规模代码库分析",
      "fileHash": "a6b9da6c251d5413326e4079932d4405",
      "status": "success"
    },
    {
      "filename": "codeaskcli\\analyzer.py",
      "content": "### 代码分析报告\n\n#### 1. 功能概述\n该代码是代码分析工具的核心模块，通过AI接口自动分析项目代码文件，支持增量分析和多线程处理。主要功能包括：扫描匹配文件、调用AI模型进行代码分析、生成单文件分析报告和项目总结报告、支持增量更新（仅分析修改过的文件）和终端可视化进度展示。适用于代码质量检查、项目文档生成等场景。\n\n#### 2. 依赖项\n\n- 内部模块：\n  codeaskcli.api.BaseAIClient/AIApiClient（AI服务接口）\n  codeaskcli.file_utils（文件操作工具集）\n  codeaskcli.tui.AnalysisTUI（终端UI组件）\n\n- 标准库：\n  os, json, time, concurrent.futures\n  typing（类型注解）\n\n\n#### 3. 代码结构分析\n\n**关键组件说明**：\n- `analyze_single_file()`：单文件分析核心方法，包含：\n  - 文件读取与哈希计算\n  - AI接口调用（3次重试机制）\n  - 分析进度状态更新\n  - 错误处理与指数退避策略\n\n- `analyze_project()`：项目分析入口，实现：\n  - 文件模式匹配（`find_matching_files`）\n  - 增量分析（`load_previous_analysis`）\n  - 多线程并发处理（ThreadPoolExecutor）\n  - 结果合并与清理（`remove_analysis_file`）\n\n- `generate_summary()`：聚合分析结果生成总结报告，包含：\n  - 多文件内容拼接\n  - AI总结生成接口调用\n  - 总结生成状态跟踪\n\n**执行流程图**：\nmermaid\ngraph TD\n    A[开始项目分析] --> B[查找匹配文件]\n    B --> C{增量模式?}\n    C -->|是| D[加载历史分析]\n    C -->|否| E[分析所有文件]\n    D --> F[识别变更文件]\n    F --> E\n    E --> G[创建线程池]\n    G --> H[并发分析文件]\n    H --> I{发生错误?}\n    I -->|是| J[重试机制]\n    I -->|否| K[收集结果]\n    J --> K\n    K --> L[生成总结报告]\n    L --> M[保存分析结果]\n    M --> N[显示分析耗时]\n    N --> O[结束]\n\n\n**核心类关系**：\nmermaid\nclassDiagram\n    class CodeAnalyzer{\n        +analyze_single_file()\n        +generate_summary()\n        +analyze_project()\n        +load_previous_analysis()\n        -api_client: BaseAIClient\n        -concurrency: int\n    }\n    \n    class BaseAIClient{\n        +chat_completion()\n        +clean_response()\n    }\n    \n    class AnalysisTUI{\n        +update_file_progress()\n        +start_summary_generation()\n    }\n    \n    CodeAnalyzer --> BaseAIClient: 依赖\n    CodeAnalyzer --> AnalysisTUI: 可选依赖\n    CodeAnalyzer ..> file_utils: 工具调用\n",
      "fileHash": "b764cdb942b8b73cfb31b1ca73b7e4db",
      "status": "success"
    },
    {
      "filename": "codeaskcli\\tui.py",
      "content": "### 代码分析报告：codeaskcli/tui.py\n\n---\n\n#### 1. 功能概述  \n该文件是命令行工具的 **终端用户界面模块**，核心功能是 **实时显示分析任务的进度和状态**。通过 [Rich](https://rich.readthedocs.io/) 库实现动态进度条、多任务并行显示和彩色状态反馈。主要应用于文件分析、批量处理等耗时操作的进度监控场景，包含总进度跟踪、单文件状态更新和总结生成动画三大模块。\n\n---\n\n#### 2. 依赖项  \n- **外部依赖**：  \n  python\n  from rich.console import Console\n  from rich.progress import (Progress, TextColumn, BarColumn, ...)  # Rich 的进度条组件\n  from rich.live import Live        # 动态刷新界面\n  from rich.panel import Panel      # 面板布局\n  from rich.layout import Layout    # 复杂布局管理\n  \n- **标准库**：  \n  `typing`（类型注解）\n\n---\n\n#### 3. 代码结构分析  \n\n**关键类与方法**：  \n| 类/方法 | 功能说明 |  \n|---------|---------|  \n| `AnalysisTUI` | TUI 主控制器，管理所有界面元素 |  \n| `setup_progress_display()` | 初始化进度条框架，创建总进度条 |  \n| `add_file_task()` | 为每个分析文件创建独立进度任务 |  \n| `update_file_progress()` | 根据状态（成功/错误/重试）更新文件进度颜色 |  \n| `update_total_progress()` | 同步更新全局进度百分比 |  \n| `start_summary_generation()` | 启动无限循环式总结生成动画 |  \n\n**执行流程图**（Mermaid 流程图）：  \nmermaid\nflowchart TD\n    A[用户启动分析] --> B[setup_progress_display]\n    B --> C[add_file_task 添加文件任务]\n    C --> D{分析过程中}\n    D -->|文件处理| E[update_file_progress]\n    D -->|全局更新| F[update_total_progress]\n    D -->|生成总结| G[start_summary_generation]\n    G --> H[complete_summary_generation]\n    H --> I[finish 结束显示]\n\n\n---\n\n**技术亮点**：  \n- 通过 `rich.progress` 实现多任务并行进度显示  \n- 使用 `[green]✓` `[red]✗` 等 Unicode 符号+颜色编码增强可读性  \n- `Live` 上下文管理器实现界面动态刷新（10 FPS）  \n- 支持两种进度模式：百分比进度条（文件分析）和无限循环动画（总结生成）",
      "fileHash": "f757ff2060c9bad21d2dd9c31fbc594d",
      "status": "success"
    }
  ]
}